웹서브 - HTTP로 시작하는 URL의 이유를 마침내 이해하게 되는 시점입니다
III.1 요구사항

프로그램은 설정 파일을 인자로 받거나 기본 경로를 사용해야 합니다.
다른 웹 서버는 실행할 수 없습니다.
서버는 절대 블로킹되어서는 안 되며, 필요한 경우 클라이언트를 적절히 반송할 수 있어야 합니다.
비차단(non-blocking) 방식이어야 하며, 클라이언트와 서버 간의 모든 I/O 작업(수신 포함)에 대해 1개의 poll() (또는 동등한 함수)만을 사용해야 합니다.
poll() (또는 동등한 함수)는 읽기와 쓰기를 동시에 확인해야 합니다.
poll() (또는 동등한 함수)을 거치지 않고 읽기나 쓰기 작업을 수행해서는 안 됩니다.
읽기나 쓰기 작업 후에 errno 값을 확인하는 것은 엄격히 금지됩니다.
설정 파일을 읽을 때는 poll() (또는 동등한 함수)를 사용할 필요가 없습니다.

[경고 메시지]
비차단 파일 디스크립터를 사용해야 하므로, poll() (또는 동등한 함수) 없이 read/recv나 write/send 함수를 사용하는 것이 가능하며, 서버가 블로킹되지 않을 것입니다.
하지만 이는 더 많은 시스템 자원을 소모할 것입니다.
따라서, poll() (또는 동등한 함수)를 사용하지 않고 파일 디스크립터에서 read/recv나 write/send를 시도할 경우, 점수는 0점이 될 것입니다.

FD_SET, FD_CLR, FD_ISSET, FD_ZERO와 같은 모든 매크로와 정의를 사용할 수 있습니다(이들이 무엇이고 어떻게 작동하는지 이해하는 것이 매우 유용합니다).
서버에 대한 요청이 영원히 중단되어서는 안 됩니다.
서버는 선택한 웹 브라우저와 호환되어야 합니다.
NGINX가 HTTP 1.1을 준수하는 것으로 간주하며, 헤더와 응답 동작을 비교하는 데 사용될 수 있습니다.
HTTP 응답 상태 코드는 정확해야 합니다.
제공된 것이 없는 경우 서버에는 기본 오류 페이지가 있어야 합니다.
CGI 이외의 용도(PHP, Python 등)로 fork를 사용할 수 없습니다.
완전한 정적 웹사이트를 제공할 수 있어야 합니다.
클라이언트가 파일을 업로드할 수 있어야 합니다.
최소한 GET, POST, DELETE 메소드가 필요합니다.
서버에 대한 스트레스 테스트가 있습니다. 모든 비용을 감수하고도 사용 가능한 상태를 유지해야 합니다.
서버는 여러 포트에서 수신할 수 있어야 합니다(설정 파일 참조).

III.2 MacOS 전용
[안내사항]
MacOS는 다른 Unix OS와 같은 방식으로 write()를 구현하지 않기 때문에, fcntl()을 사용할 수 있습니다.
다른 Unix OS와 유사한 동작을 얻으려면 비차단 모드로 파일 디스크립터를 사용해야 합니다.
[경고사항]
단, fcntl()은 다음 플래그들과만 함께 사용할 수 있습니다:
F_SETFL, O_NONBLOCK 및 FD_CLOEXEC
다른 모든 플래그는 금지됩니다.
III.3 설정 파일
[팁]
NGINX 설정 파일의 'server' 부분에서 영감을 얻을 수 있습니다.
설정 파일에서는 다음 사항들을 설정할 수 있어야 합니다:

각 '서버'의 포트와 호스트 선택
server_names 설정 여부 선택
host:port에 대한 첫 번째 서버가 해당 host:port의 기본값이 됩니다(즉, 다른 서버에 속하지 않는 모든 요청에 응답함)
기본 오류 페이지 설정
클라이언트 본문 크기 제한
다음 규칙/설정으로 경로 설정(정규식을 사용하지 않음):

해당 경로에 대해 허용된 HTTP 메소드 목록 정의
HTTP 리디렉션 정의
파일을 검색할 디렉토리나 파일 정의(예: url /kapouet이 /tmp/www에 루트를 두고 있다면, url /kapouet/pouic/toto/pouet은 /tmp/www/pouic/toto/pouet임)
디렉토리 목록 표시 설정
요청이 디렉토리일 경우 응답할 기본 파일 설정
특정 파일 확장자(예: .php)에 기반한 CGI 실행
POST와 GET 메소드로 작동하도록 설정
업로드된 파일을 수락하고 저장될 위치를 설정하도록 경로 구성

[CGI 관련 참고사항]

CGI가 무엇인지 궁금하신가요?
CGI를 직접 호출하지 않으므로, PATH_INFO로 전체 경로를 사용하세요.
청크된 요청의 경우, 서버가 이를 청크 해제해야 하며, CGI는 본문의 끝으로 EOF를 예상합니다.
CGI의 출력도 마찬가지입니다. CGI에서 content length가 반환되지 않으면, EOF가 반환된 데이터의 끝을 표시합니다.
프로그램은 요청된 파일을 첫 번째 인자로 하여 CGI를 호출해야 합니다.
CGI는 상대 경로 파일 접근을 위해 올바른 디렉토리에서 실행되어야 합니다.
서버는 하나의 CGI(php-CGI, Python 등)와 작동해야 합니다.

평가 중에 모든 기능이 작동하는지 테스트하고 시연하기 위해 일부 설정 파일과 기본 파일을 제공해야 합니다.
[안내사항]
프로그램의 동작에 대해 질문이 있다면 NGINX의 동작과 비교해보세요.
예를 들어, server_name이 어떻게 작동하는지 확인하세요.
작은 테스터를 공유했습니다. 브라우저와 테스트로 모든 것이 잘 작동한다면 이를 통과할 필요는 없지만, 버그를 찾는 데 도움이 될 수 있습니다.
[중요 경고사항]
중요한 것은 복원력입니다. 서버가 절대로 중단되어서는 안 됩니다.
[테스트 관련 경고사항]
하나의 프로그램으로만 테스트하지 마세요. Python이나 Golang 등 더 편리한 언어로 테스트를 작성하세요. 원한다면 C나 C++로도 가능합니다.